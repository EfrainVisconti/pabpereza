"use strict";(self.webpackChunkpabpereza=self.webpackChunkpabpereza||[]).push([[5464],{11312:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>l});var o=a(17624),n=a(4552);const i={},s=void 0,t={id:"notas/git_errores_comunes",title:"git_errores_comunes",description:"Git es un sistema muy estricto y met\xf3dico dise\xf1ado para garantizar la integridad de nuestro",source:"@site/docs/notas/git_errores_comunes.md",sourceDirName:"notas",slug:"/notas/git_errores_comunes",permalink:"/docs/notas/git_errores_comunes",draft:!1,unlisted:!1,editUrl:"https://github.com/pabpereza/pabpereza/tree/main/docs/notas/git_errores_comunes.md",tags:[],version:"current",frontMatter:{},sidebar:"notas",previous:{title:"fundamentos",permalink:"/docs/notas/fundamentos"},next:{title:"grub",permalink:"/docs/notas/grub"}},c={},l=[{value:"Ammend - Enmendar el commit m\xe1s reciente",id:"ammend---enmendar-el-commit-m\xe1s-reciente",level:2},{value:"Uso b\xe1sico",id:"uso-b\xe1sico",level:3},{value:"A\xf1adir archivo al \xfaltimo commit",id:"a\xf1adir-archivo-al-\xfaltimo-commit",level:3},{value:"Reset - Revertir cambios de un commit",id:"reset---revertir-cambios-de-un-commit",level:2},{value:"Borrar del stage area",id:"borrar-del-stage-area",level:3},{value:"Revertir un commit",id:"revertir-un-commit",level:3},{value:"Volver a un estado anterior tras muchos cambios",id:"volver-a-un-estado-anterior-tras-muchos-cambios",level:3},{value:"Volver al \xfaltimo commit r\xe1pidamente",id:"volver-al-\xfaltimo-commit-r\xe1pidamente",level:3},{value:"Branch - Errores en ramas",id:"branch---errores-en-ramas",level:2},{value:"Nombre de rama equivocado",id:"nombre-de-rama-equivocado",level:3},{value:"Commit a la rama principal",id:"commit-a-la-rama-principal",level:3},{value:"Eliminar secretos tanto en local como en remoto",id:"eliminar-secretos-tanto-en-local-como-en-remoto",level:2}];function m(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.p,{children:"Git es un sistema muy estricto y met\xf3dico dise\xf1ado para garantizar la integridad de nuestro\nc\xf3digo a lo largo de infinidad de versiones y cambios generados por m\xfaltiples programadores."}),"\n",(0,o.jsx)(r.p,{children:"Es normal y frecuente en estos procesos equivocarnos, como por ejemplo, escribir el mensaje\nque no era en un commit, olvidarse de a\xf1adir alg\xfan archivo en un commit o a\xf1adir el que no quer\xedas... etc."}),"\n",(0,o.jsx)(r.p,{children:"Por suerte, para todos ellos hay soluci\xf3n y veremos diferentes comandos que git ofrece para arreglar errores."}),"\n",(0,o.jsx)(r.p,{children:"Vamos a ir viendo las diferentes opciones agrupadas por comandos:"}),"\n",(0,o.jsx)(r.h2,{id:"ammend---enmendar-el-commit-m\xe1s-reciente",children:"Ammend - Enmendar el commit m\xe1s reciente"}),"\n",(0,o.jsx)(r.p,{children:"Esta opci\xf3n trabaja en conjunto con el comando commit y es una manera pr\xe1ctica de modificar el commit m\xe1s\nreciente. Te permite combinar los cambios prepados con el commit anterior en en lugar de crear uno nuevo."}),"\n",(0,o.jsx)(r.p,{children:"Sin embargo, este comando no se limita a alterar el cambio m\xe1s reciente, sino que lo reemplaza por completo.\nImportante tenerlo en cuenta sobre todo en repositorios p\xfablicos cuyos commits puedan ser dependencias de otras\nramas o herramientas."}),"\n",(0,o.jsx)(r.h3,{id:"uso-b\xe1sico",children:"Uso b\xe1sico"}),"\n",(0,o.jsx)(r.p,{children:"Sup\xf3n que acabas de terminar un commit y quieres modificar su mensaje porque has puesto lo que no deb\xedas. Podr\xedas ejecutar esto:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git commit --amend\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Tras ejecutarlo se nos mostrar\xe1 el editor de texto seleccionado en git para editar el menaje del \xfaltimo commit. En ",(0,o.jsx)(r.a,{href:"/docs/notas/configurar_editor_commits",children:"esta entrada"})," puedes\nver como cambiar el editor de texto que git usar\xe1 para estas labores."]}),"\n",(0,o.jsx)(r.h3,{id:"a\xf1adir-archivo-al-\xfaltimo-commit",children:"A\xf1adir archivo al \xfaltimo commit"}),"\n",(0,o.jsx)(r.p,{children:'Podr\xeda pasar tambi\xe9n, que te hubieras dejado de a\xf1adir un archivo al \xfaltimo commit. Es cierto que podr\xedas crear un nuevo commit pero queda m\xe1s limpio si corriges el anterior.\nPara ello a\xf1adir\xedamos el o los archivos que nos hubieramos dejado en el anterior commit usando el comando "add":'}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git add <fichero>\n"})}),"\n",(0,o.jsx)(r.p,{children:'Y luego, volver\xedamos a repetir el "ammend":'}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git commit --amend\n"})}),"\n",(0,o.jsx)(r.p,{children:"Esto nos permitir\xeda a\xf1adir el archivo los archivos omitidos en el commit anterior y corregir el mensaje si fuera necesario."}),"\n",(0,o.jsx)(r.h2,{id:"reset---revertir-cambios-de-un-commit",children:"Reset - Revertir cambios de un commit"}),"\n",(0,o.jsx)(r.p,{children:"Que pasar\xeda si hacemos lo contrario que en punto anterior, en vez de a\xf1adir un archivo, lo queremos eliminar. Muchas veces por error incluimos en el\nrepositorio un archivo que no quer\xedamos dado que contienen secretos o informaci\xf3n importante."}),"\n",(0,o.jsx)(r.h3,{id:"borrar-del-stage-area",children:"Borrar del stage area"}),"\n",(0,o.jsx)(r.p,{children:'Si solo lo hemos mandado al "stage" area, podr\xedamos quitarlo de ah\xed con el siguiente comando:'}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git reset <fichero a eliminar>\n"})}),"\n",(0,o.jsx)(r.h3,{id:"revertir-un-commit",children:"Revertir un commit"}),"\n",(0,o.jsx)(r.p,{children:'En caso de haberlo a\xf1adido al "stage area" y haber hecho un commit, podr\xedamos revertir el cambio con el siguiente comando:'}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git reset --soft HEAD~1 #Revertir el \xfaltimo commit\ngit reset <archivo a eliminar> #Resturar el archivo del commiteado por error\nrm <archivo a eliminar> #Eliminar el archivo del repositorio\ngit commit #Hacer el commit\n"})}),"\n",(0,o.jsx)(r.p,{children:"Esto revertir\xe1 el \xfaltimo commit, eliminar\xe1 el archivo y a\xf1adira un nuevo commit en su lugar."}),"\n",(0,o.jsx)(r.h3,{id:"volver-a-un-estado-anterior-tras-muchos-cambios",children:"Volver a un estado anterior tras muchos cambios"}),"\n",(0,o.jsx)(r.p,{children:'Podr\xeda pasar, ya en el peor de los casos, que hubieramos hecho muchos cambios mal y quisieramos volver a un estado anterior.\nPrimero podr\xedamos consultar el historial de commits con el comando "log" o "reflog" y ver la referencia del commit al que queremos volver:'}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git log\ngit reflog\n"})}),"\n",(0,o.jsx)(r.p,{children:"Con la referencia del commit al que queremos volver, podemos revertir el commit con el siguiente comando:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git reset HEAD@{Referencia}\n"})}),"\n",(0,o.jsx)(r.h3,{id:"volver-al-\xfaltimo-commit-r\xe1pidamente",children:"Volver al \xfaltimo commit r\xe1pidamente"}),"\n",(0,o.jsx)(r.p,{children:'Para volver al \xfaltimo commit sin tener que consultar el historial, podemos usar el comando "reset" con el par\xe1metro "--hard":'}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git reset --hard HEAD\n"})}),"\n",(0,o.jsx)(r.h2,{id:"branch---errores-en-ramas",children:"Branch - Errores en ramas"}),"\n",(0,o.jsx)(r.p,{children:"En este apartado veremos los errores m\xe1s comunes que pueden ocurrir en las ramas."}),"\n",(0,o.jsx)(r.h3,{id:"nombre-de-rama-equivocado",children:"Nombre de rama equivocado"}),"\n",(0,o.jsx)(r.p,{children:'Es frecuente que con las prisas escribamos el nombre de una rama con un nombre equivocado. Aqu\xed la soluci\xf3n es simple, dentro del comando branch esta\nel par\xe1metro "-m" que nos permite cambiar el nombre de la rama:'}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git branch -m nombre-rama-equivocada nombre-rama-correcta\n"})}),"\n",(0,o.jsx)(r.h3,{id:"commit-a-la-rama-principal",children:"Commit a la rama principal"}),"\n",(0,o.jsx)(r.p,{children:"Podr\xedamos hacer sin querer un commit en la rama principal, por ejemplo, main cuando nuestro sistema de organizaci\xf3n es hacer ramas distintas para\ncada caracter\xedstica nueva que se desarrolla o trabajar primero en develop y luego integrar los cambios en main."}),"\n",(0,o.jsx)(r.p,{children:"En varios pasos podr\xedamos crear una rama con todos los cambios que acabamos de generar y luego, en el siguiente paso, resetear la rama principal\nal commit anterior:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:"git branch nombre-rama-nueva-con-los-cambios #Creamos una rama con los cambios\ngit reset HEAD~ --hard #Reseteamos la rama principal al commit anterior\ngit checkout nombre-rama-nueva-con-los-cambios #Cambiamos a la rama nueva\n"})}),"\n",(0,o.jsx)(r.p,{children:"En el \xfaltimo paso, nos cambiar\xedamos a la rama nueva para seguir trabajando con los cambios habiendo dejado limpia la rama principal."}),"\n",(0,o.jsx)(r.h2,{id:"eliminar-secretos-tanto-en-local-como-en-remoto",children:"Eliminar secretos tanto en local como en remoto"}),"\n",(0,o.jsx)(r.p,{children:"En este apartado veremos como eliminar los secretos de un repositorio local o remoto. Es\nmuy frecuente sin querer introducir tokens o contrase\xf1as en un repositorio. Aunque los borremos posteriormente,\nestos, se mantendr\xe1n en el historial de git."}),"\n",(0,o.jsx)(r.p,{children:"Podemos borrar un archivo de toda la historia con el siguiente comando:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-shell",children:' git filter-branch --force --index-filter \\\n  "git rm --cached --ignore-unmatch ARCHIVO-SENSIBLE" \\\n  --prune-empty --tag-name-filter cat -- --all\n  git push --force --verbose --dry-run\n  git push --force\n'})})]})}function d(e={}){const{wrapper:r}={...(0,n.M)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},4552:(e,r,a)=>{a.d(r,{I:()=>t,M:()=>s});var o=a(11504);const n={},i=o.createContext(n);function s(e){const r=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(i.Provider,{value:r},e.children)}}}]);