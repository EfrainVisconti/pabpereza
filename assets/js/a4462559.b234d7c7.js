"use strict";(self.webpackChunkpabpereza=self.webpackChunkpabpereza||[]).push([[1316],{3608:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});var a=n(17624),r=n(4552);const o={},i=void 0,t={id:"notas/Kubernetes/usuarios_roles",title:"usuarios_roles",description:"Por defecto, Kubernetes no tiene usuarios ni roles. Sin embargo, podemos definir usuarios y roles para controlar el acceso a los recursos de Kubernetes.",source:"@site/docs/notas/Kubernetes/usuarios_roles.md",sourceDirName:"notas/Kubernetes",slug:"/notas/Kubernetes/usuarios_roles",permalink:"/docs/notas/Kubernetes/usuarios_roles",draft:!1,unlisted:!1,editUrl:"https://github.com/pabpereza/pabpereza/tree/main/docs/notas/Kubernetes/usuarios_roles.md",tags:[],version:"current",frontMatter:{},sidebar:"notas",previous:{title:"services",permalink:"/docs/notas/Kubernetes/services"},next:{title:"cifrar_descifrar",permalink:"/docs/notas/MySQL/cifrar_descifrar"}},c={},l=[{value:"Usuarios",id:"usuarios",level:2},{value:"Crear usuario mediante Certificado x509",id:"crear-usuario-mediante-certificado-x509",level:3},{value:"Service Accounts - Cuentas de servicio",id:"service-accounts---cuentas-de-servicio",level:2},{value:"Roles",id:"roles",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:"Por defecto, Kubernetes no tiene usuarios ni roles. Sin embargo, podemos definir usuarios y roles para controlar el acceso a los recursos de Kubernetes."}),"\n",(0,a.jsx)(s.h2,{id:"usuarios",children:"Usuarios"}),"\n",(0,a.jsxs)(s.p,{children:["Normalmente los usuarios se definen en un sistema de autenticaci\xf3n externo, como LDAP, Active Directory, etc. Kubernetes no tiene un sistema de autenticaci\xf3n propio, pero puede integrarse con sistemas de autenticaci\xf3n externos mediante ",(0,a.jsx)(s.a,{href:"https://kubernetes.io/docs/reference/access-authn-authz/authentication/#authentication-strategies",children:"plugins de autenticaci\xf3n"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"Se pueden definir usuarios de forma manual mediante certificados x509."}),"\n",(0,a.jsx)(s.h3,{id:"crear-usuario-mediante-certificado-x509",children:"Crear usuario mediante Certificado x509"}),"\n",(0,a.jsxs)(s.p,{children:["Estos pasos se tienen que realizar en un ",(0,a.jsx)(s.code,{children:"control plane"})," de Kubernetes, el cu\xe1l, ejecuta el API y es el encargado de validar los certificados x509."]}),"\n",(0,a.jsx)(s.p,{children:"Primero tendremos que crear un par de claves privada y p\xfablica. Para ello, ejecutamos el siguiente comando:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"openssl genrsa -out user.key 2048\n"})}),"\n",(0,a.jsx)(s.p,{children:"A continuaci\xf3n, generamos el certificado x509:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'openssl req -new -key user.key -out user.csr -subj "/CN=user/O=group"\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Finalmente, firmamos el certificado x509 con la clave privada del ",(0,a.jsx)(s.code,{children:"control plane"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"openssl x509 -req -in user.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out user.crt -days 500\n"})}),"\n",(0,a.jsx)(s.p,{children:"Una vez generado el certificado x509, podemos a\xf1adirlo al API de Kubernetes. Para ello, ejecutamos el siguiente comando:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"kubectl config set-credentials user --client-certificate=user.crt --client-key=user.key --embed-certs=true\n"})}),"\n",(0,a.jsx)(s.p,{children:"Por defecto, este usuario carecer\xe1 de permisos para realizar ninguna acci\xf3n en el cluster. Para asignarle permisos, tendremos que crear asignarle un rol ( a nivel de namespace) o un clusterrole (a nivel de cluster)."}),"\n",(0,a.jsx)(s.p,{children:"Esta asignaci\xf3n de un rol, se realiza mediante rolesbindings ( a nivel de namespace) o clusterrolebindings (a nivel de rol)."}),"\n",(0,a.jsx)(s.h2,{id:"service-accounts---cuentas-de-servicio",children:"Service Accounts - Cuentas de servicio"}),"\n",(0,a.jsx)(s.p,{children:"Kubernetes crea una cuenta de servicio por defecto para cada namespace. Esta cuenta de servicio se utiliza para acceder a la API de Kubernetes. Podemos crear cuentas de servicio adicionales para acceder a la API de Kubernetes."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"kubectl create serviceaccount <nombre>\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Estas cuentas podr\xedamos asocialas a un ",(0,a.jsx)(s.code,{children:"role"})," mediante objetos ",(0,a.jsx)(s.code,{children:"RoleBinding"})," o ",(0,a.jsx)(s.code,{children:"ClusterRoleBinding"})," como se explica en los siguientes pasos."]}),"\n",(0,a.jsx)(s.h2,{id:"roles",children:"Roles"}),"\n",(0,a.jsxs)(s.p,{children:["Podemos definir roles en kubebernetes creando objetos de tile ",(0,a.jsx)(s.code,{children:"Role"}),". Por ejemplo:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-yaml",children:'apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: pod-admin\nrules:\n- apiGroups: ["","extensions","apps"] # "" indica el core API group\n  resources: ["pods"]\n  verbs: ["get", "watch", "list", "delete", "create", "update", "patch"] # Podr\xedamos usar * para indicar todos los verbos\n'})}),"\n",(0,a.jsx)(s.p,{children:"Estos nos permiten granularizar el acceso a cada uno de los recursos y los permisos espec\xedficos que les queremos otorgar."}),"\n",(0,a.jsxs)(s.p,{children:["Crear un rol solo es el primer paso. Para usarlo, tenemos que asignarlo a un usuario o grupo de usuarios. Para ello, podemos usar un objeto de tipo ",(0,a.jsx)(s.code,{children:"RoleBinding"}),". Por ejemplo:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-yaml",children:"apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: read-pods\n  namespace: default\nsubjects:\n- kind: User\n  name: jdoe # Nombre del usuario\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role # Este debe ser Role o ClusterRole\n  name: pod-reader # Este debe ser el nombre del rol que queremos asignar\n  apiGroup: rbac.authorization.k8s.io\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Con esto, creamos la relaci\xf3n entre el rol ",(0,a.jsx)(s.code,{children:"pod-reader"})," y el usuario ",(0,a.jsx)(s.code,{children:"jdoe"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["Podemos consultar los roles y los bindings usando los comandos ",(0,a.jsx)(s.code,{children:"kubectl get roles"})," y ",(0,a.jsx)(s.code,{children:"kubectl get rolebindings"}),". Estos comandos nos devolver\xe1n los roles y los bindings de todos los namespaces. Si queremos consultar los roles y los bindings de un namespace en concreto, podemos usar el flag ",(0,a.jsx)(s.code,{children:"-n"})," o ",(0,a.jsx)(s.code,{children:"--namespace"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"Por ejemplo:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"kubectl get roles -n default\nkubectl get rolebindings -n default\n"})}),"\n",(0,a.jsx)(s.p,{children:"Estos nos mostrar\xedan una salida similar a la siguiente:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"Name:         pod-admin\nLabels:       <none>\nAnnotations:  <none>\nPolicyRule:\n  Resources               Non-Resource URLs  Resource Names  Verbs\n  ---------               -----------------  --------------  -----\n  deployments             []                 []              [list get watch create update patch delete]\n  pods                    []                 []              [list get watch create update patch delete]\n  replicasets             []                 []              [list get watch create update patch delete]\n  deployments.apps        []                 []              [list get watch create update patch delete]\n  pods.apps               []                 []              [list get watch create update patch delete]\n  replicasets.apps        []                 []              [list get watch create update patch delete]\n  deployments.extensions  []                 []              [list get watch create update patch delete]\n  pods.extensions         []                 []              [list get watch create update patch delete]\n  replicasets.extensions  []                 []              [list get watch create update patch delete]\n"})}),"\n",(0,a.jsx)(s.p,{children:"En el caso de los bindings, la salida ser\xeda similar a la siguiente:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"Name:         read-pods\nLabels:       <none>\nAnnotations:  <none>\nRole:\n  Kind:  Role\n  Name:  dev-prod\nSubjects:\n  Kind  Name    Namespace\n  ----  ----    ---------\n  User  jdoe\n"})})]})}function u(e={}){const{wrapper:s}={...(0,r.M)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},4552:(e,s,n)=>{n.d(s,{I:()=>t,M:()=>i});var a=n(11504);const r={},o=a.createContext(r);function i(e){const s=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:s},e.children)}}}]);