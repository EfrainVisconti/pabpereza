"use strict";(self.webpackChunkpabpereza=self.webpackChunkpabpereza||[]).push([[2332],{63748:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=a(17624),r=a(4552);const o={},d=void 0,i={id:"notas/MySQL/triggers",title:"triggers",description:"Un disparador o trigger es un tipo de procedimiento almacenado que se ejecuta",source:"@site/docs/notas/MySQL/triggers.md",sourceDirName:"notas/MySQL",slug:"/notas/MySQL/triggers",permalink:"/docs/notas/MySQL/triggers",draft:!1,unlisted:!1,editUrl:"https://github.com/pabpereza/pabpereza/tree/main/docs/notas/MySQL/triggers.md",tags:[],version:"current",frontMatter:{},sidebar:"notas",previous:{title:"sql_variables",permalink:"/docs/notas/MySQL/sql_variables"},next:{title:"usuarios",permalink:"/docs/notas/MySQL/usuarios"}},t={},c=[{value:"Sintaxis b\xe1sica",id:"sintaxis-b\xe1sica",level:2},{value:"Cuerpo del disparador",id:"cuerpo-del-disparador",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Un disparador o trigger es un tipo de procedimiento almacenado que se ejecuta\ncuando se intentan alterar los datos de una tabla o vista.\nLa diferencia con los procedimientos almacenados es que los disparadores:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No pueden ser invocados directamente. El disparador se ejecuta autom\xe1ticamente."}),"\n",(0,s.jsx)(n.li,{children:"No reciben y devuelven par\xe1metros."}),"\n",(0,s.jsx)(n.li,{children:"Son apropiados para mantener la integridad de los datos, no para obtener resultados de consultas"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Su funci\xf3n es ejecutarse cuando ocurre alg\xfan evento en una tabla. Estos eventos pueden ser insertar, modificar o borrar datos ( INSERT, UPDATE, DELETE )."}),"\n",(0,s.jsx)(n.h2,{id:"sintaxis-b\xe1sica",children:"Sintaxis b\xe1sica"}),"\n",(0,s.jsx)(n.p,{children:"Antes de empezar, hay que detallar algunos variables que se usar\xe1n en el siguiente ejemplo:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Nombre del disparador (",(0,s.jsx)(n.code,{children:"name"}),"): Nombre del disparador."]}),"\n",(0,s.jsxs)(n.li,{children:["Tiempo del disparador (",(0,s.jsx)(n.code,{children:"time"}),")[ AFTER o BEFORE ]: se puede especificar cuando se ejecuta el disparador. Antes o despu\xe9s de la ejecuci\xf3n de la consulta."]}),"\n",(0,s.jsxs)(n.li,{children:["Evento (",(0,s.jsx)(n.code,{children:"evento"}),")[ INSERT, UPDATE o DELETE ]: se puede especificar el evento en el que se desea que se ejecute el disparador."]}),"\n",(0,s.jsxs)(n.li,{children:["Nombre de la tabla (",(0,s.jsx)(n.code,{children:"nombre_tabla"}),"): se puede especificar el nombre de la tabla en la que se desea que se ejecute el disparador."]}),"\n",(0,s.jsxs)(n.li,{children:["Orden del trigger (",(0,s.jsx)(n.code,{children:"orden"})," opcional) [ FOLLOWS o  PRECEDES ]: se puede especificar el orden en el que se desea que se ejecute el disparador."]}),"\n",(0,s.jsxs)(n.li,{children:["Cuerpo del disparador (",(0,s.jsx)(n.code,{children:"cuerpo"}),"): se puede especificar el cuerpo del disparador."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"La sintaxis de un disparador es la siguiente:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TRIGGER <name> <time> <evento> \nON <nombre_tabla> FOR EACH ROW \nBEGIN\n<cuerpo>\nEND;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Por ejemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TRIGGER tr_insert_persona AFTER INSERT ON persona FOR EACH ROW\nBEGIN\n\t<cuerpo>\nEND;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cuerpo-del-disparador",children:"Cuerpo del disparador"}),"\n",(0,s.jsx)(n.p,{children:"El cuerpo del disparador es el c\xf3digo que se ejecuta cuando se lanza el disparador. Dentro de un disparador nos podemos referir a los datos que se est\xe1n insertando, modificando o borrando. Esto nos permite evitar que se borren o modifiquen datos indeseados; aplicar condiciones como por ejemplo, que haya stock suficiente para un producto.. etc."}),"\n",(0,s.jsx)(n.p,{children:"El cuerpo del disparador se puede definir en varias partes. En cada parte se puede definir una sentencia SQL."}),"\n",(0,s.jsx)(n.p,{children:"Por ejemplo, controlar la edad de una persona para evitar que se inserten menores de edad:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TRIGGER tr_insert_persona BEFORE UPDATE ON persona FOR EACH ROW\nBEGIN\n\tIF NEW.edad < 18 THEN\n\t\tUPDATE persona SET edad = 18 WHERE id = NEW.id;\n\tEND IF;\nEND;\n"})}),"\n",(0,s.jsx)(n.p,{children:"En el cuerpo podemos definir variables, condiciones, sentencias SQL, etc."}),"\n",(0,s.jsx)(n.p,{children:"Por ejemplo, un disparador en el que consultamos y almacenamos en variables datos de otras tablas:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TRIGGER tr_insert_persona AFTER INSERT ON persona FOR EACH ROW\nBEGIN\n\tDECLARE nombre_mascota VARCHAR(50);\n\n\tSET nombre_mascota = (SELECT nombre FROM mascotas WHERE id = NEW.id);\n\n\tINSERT INTO persona_mascota (id, nombre, edad, fecha_nacimiento, ) VALUES (NEW.id, nombre_mascota, NEW.edad, NEW.fecha_nacimiento);\nEND;\n"})}),"\n",(0,s.jsx)(n.p,{children:"#TODO: Diferencias entre NEW y OLD..."})]})}function p(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},4552:(e,n,a)=>{a.d(n,{I:()=>i,M:()=>d});var s=a(11504);const r={},o=s.createContext(r);function d(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);